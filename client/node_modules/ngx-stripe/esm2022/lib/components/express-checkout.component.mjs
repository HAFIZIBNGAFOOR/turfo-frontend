import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, EventEmitter, Output, ContentChild, TemplateRef, Optional } from '@angular/core';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/elements.directive";
import * as i3 from "@angular/common";
class StripeExpressCheckoutComponent {
    stripeElementsService;
    elementsProvider;
    loadingTemplate;
    stripeElementRef;
    element;
    containerClass;
    options;
    elementsOptions;
    stripe;
    load = new EventEmitter();
    blur = new EventEmitter();
    cancel = new EventEmitter();
    clicked = new EventEmitter();
    confirm = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    escape = new EventEmitter();
    loaderror = new EventEmitter();
    shippingaddresschange = new EventEmitter();
    shippingratechange = new EventEmitter();
    elements;
    state = 'notready';
    elementsSubscription;
    constructor(stripeElementsService, elementsProvider) {
        this.stripeElementsService = stripeElementsService;
        this.elementsProvider = elementsProvider;
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        let updateElements = false;
        if (!this.elementsProvider && (changes.elementsOptions || changes.stripe || !this.elements)) {
            this.elements = await this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();
            updateElements = true;
        }
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
        this.state = 'ready';
    }
    async ngOnInit() {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.createElement(options);
                this.state = 'ready';
            });
        }
        else if (this.state === 'notready') {
            this.state = 'starting';
            this.elements = await this.stripeElementsService.elements(this.stripe).toPromise();
            this.createElement(options);
            this.state = 'ready';
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    update(options) {
        return this.element.update(options);
    }
    /**
     * @deprecated
     */
    getLinkAuthenticationElement() {
        return this.element;
    }
    createElement(options) {
        if (this.element) {
            this.element.unmount();
        }
        this.element = this.elements.create('expressCheckout', options);
        this.element.on('blur', () => this.blur.emit());
        this.element.on('cancel', () => this.cancel.emit());
        this.element.on('click', (ev) => this.clicked.emit(ev));
        this.element.on('confirm', (ev) => this.confirm.emit(ev));
        this.element.on('focus', () => this.focus.emit());
        this.element.on('ready', (ev) => this.ready.emit(ev));
        this.element.on('escape', () => this.escape.emit());
        this.element.on('loaderror', (err) => this.loaderror.emit(err));
        this.element.on('shippingaddresschange', (ev) => this.shippingaddresschange.emit(ev));
        this.element.on('shippingratechange', (ev) => this.shippingratechange.emit(ev));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripeExpressCheckoutComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: StripeExpressCheckoutComponent, isStandalone: true, selector: "ngx-stripe-express-checkout", inputs: { containerClass: "containerClass", options: "options", elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { load: "load", blur: "blur", cancel: "cancel", clicked: "clicked", confirm: "confirm", focus: "focus", ready: "ready", escape: "escape", loaderror: "loaderror", shippingaddresschange: "shippingaddresschange", shippingratechange: "shippingratechange" }, queries: [{ propertyName: "loadingTemplate", first: true, predicate: NgxStripeElementLoadingTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="field" #stripeElementRef>
      <ng-container *ngIf="state !== 'ready' && loadingTemplate" [ngTemplateOutlet]="loadingTemplate"></ng-container>
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] });
}
export { StripeExpressCheckoutComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripeExpressCheckoutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-express-checkout',
                    standalone: true,
                    template: `
    <div class="field" #stripeElementRef>
      <ng-container *ngIf="state !== 'ready' && loadingTemplate" [ngTemplateOutlet]="loadingTemplate"></ng-container>
    </div>
  `,
                    imports: [CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }, { type: i2.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { loadingTemplate: [{
                type: ContentChild,
                args: [NgxStripeElementLoadingTemplateDirective, { read: TemplateRef }]
            }], stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], cancel: [{
                type: Output
            }], clicked: [{
                type: Output
            }], confirm: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }], loaderror: [{
                type: Output
            }], shippingaddresschange: [{
                type: Output
            }], shippingratechange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,