import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, Output, EventEmitter, Optional } from '@angular/core';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/elements.directive";
class StripePaymentElementComponent {
    stripeElementsService;
    elementsProvider;
    stripeElementRef;
    element;
    elements;
    containerClass;
    options;
    elementsOptions;
    stripe;
    appearance;
    clientSecret;
    doNotCreateUntilClientSecretIsSet = false;
    load = new EventEmitter();
    blur = new EventEmitter();
    change = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    escape = new EventEmitter();
    loaderror = new EventEmitter();
    state = 'notready';
    elementsSubscription;
    constructor(stripeElementsService, elementsProvider) {
        this.stripeElementsService = stripeElementsService;
        this.elementsProvider = elementsProvider;
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        let updateElements = false;
        if (!this.elementsProvider &&
            (changes.elementsOptions || changes.stripe || changes.clientSecret || changes.appearance || !this.elements)) {
            this.elements = await this.stripeElementsService.elements(this.stripe, {
                ...(this.elementsOptions || {}),
                ...(this.appearance ? { appearance: this.appearance } : {}),
                ...(this.clientSecret ? { clientSecret: this.clientSecret } : {})
            }).toPromise();
            updateElements = true;
        }
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
        this.state = 'ready';
    }
    async ngOnInit() {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.createElement(options);
                this.state = 'ready';
            });
        }
        else if (this.state === 'notready') {
            this.state = 'starting';
            this.elements = await this.stripeElementsService.elements(this.stripe, {
                ...(this.elementsOptions || {}),
                ...(this.appearance ? { appearance: this.appearance } : {}),
                ...(this.clientSecret ? { clientSecret: this.clientSecret } : {})
            }).toPromise();
            this.createElement(options);
            this.state = 'ready';
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    update(options) {
        return this.element.update(options);
    }
    collapse() {
        return this.element.collapse();
    }
    fetchUpdates() {
        return from(this.elements.fetchUpdates());
    }
    createElement(options = {}) {
        if (this.element) {
            this.element.unmount();
        }
        try {
            this.element = this.elements.create('payment', options);
        }
        catch (err) {
            this.elements = null;
            throw err;
        }
        this.element.on('change', (ev) => this.change.emit(ev));
        this.element.on('blur', (ev) => this.blur.emit(ev));
        this.element.on('focus', (ev) => this.focus.emit(ev));
        this.element.on('ready', (ev) => this.ready.emit(ev));
        this.element.on('escape', (ev) => this.escape.emit(ev));
        this.element.on('loaderror', (ev) => this.loaderror.emit(ev));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripePaymentElementComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: StripePaymentElementComponent, isStandalone: true, selector: "ngx-stripe-payment", inputs: { containerClass: "containerClass", options: "options", elementsOptions: "elementsOptions", stripe: "stripe", appearance: "appearance", clientSecret: "clientSecret", doNotCreateUntilClientSecretIsSet: "doNotCreateUntilClientSecretIsSet" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape", loaderror: "loaderror" }, viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `<div class="field" #stripeElementRef></div>`, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }] });
}
export { StripePaymentElementComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripePaymentElementComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-payment',
                    standalone: true,
                    template: `<div class="field" #stripeElementRef></div>`,
                    imports: [CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }, { type: i2.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], appearance: [{
                type: Input
            }], clientSecret: [{
                type: Input
            }], doNotCreateUntilClientSecretIsSet: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }], loaderror: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1lbGVtZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9jb21wb25lbnRzL3BheW1lbnQtZWxlbWVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxTQUFTLEVBR1QsS0FBSyxFQUNMLFNBQVMsRUFFVCxNQUFNLEVBQ04sWUFBWSxFQUVaLFFBQVEsRUFFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWdCLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQWtCMUMsTUFNYSw2QkFBNkI7SUE4Qi9CO0lBQ2E7SUE5QmdCLGdCQUFnQixDQUFjO0lBQ3BFLE9BQU8sQ0FBd0I7SUFDL0IsUUFBUSxDQUFpQjtJQUVoQixjQUFjLENBQVM7SUFDdkIsT0FBTyxDQUF1QztJQUM5QyxlQUFlLENBQWlDO0lBQ2hELE1BQU0sQ0FBeUI7SUFFL0IsVUFBVSxDQUFhO0lBQ3ZCLFlBQVksQ0FBUztJQUNyQixpQ0FBaUMsR0FBRyxLQUFLLENBQUM7SUFFekMsSUFBSSxHQUFHLElBQUksWUFBWSxFQUF3QixDQUFDO0lBRWhELElBQUksR0FBRyxJQUFJLFlBQVksRUFBOEIsQ0FBQztJQUN0RCxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQW1DLENBQUM7SUFDN0QsS0FBSyxHQUFHLElBQUksWUFBWSxFQUE4QixDQUFDO0lBQ3ZELEtBQUssR0FBRyxJQUFJLFlBQVksRUFBOEIsQ0FBQztJQUN2RCxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQThCLENBQUM7SUFDeEQsU0FBUyxHQUFHLElBQUksWUFBWSxFQUdsQyxDQUFDO0lBRUwsS0FBSyxHQUFzQyxVQUFVLENBQUM7SUFDOUMsb0JBQW9CLENBQWU7SUFFM0MsWUFDUyxxQkFBNEMsRUFD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Q0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7dUdBaElVLDZCQUE2QjsyRkFBN0IsNkJBQTZCLHNsQkFIOUIsNkNBQTZDLDJEQUM3QyxZQUFZOztTQUVYLDZCQUE2QjsyRkFBN0IsNkJBQTZCO2tCQU56QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsNkNBQTZDO29CQUN2RCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7aUJBQ3hCOzswQkFnQ0ksUUFBUTs0Q0E5QjJCLGdCQUFnQjtzQkFBckQsU0FBUzt1QkFBQyxrQkFBa0I7Z0JBSXBCLGNBQWM7c0JBQXRCLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLO2dCQUNHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUVHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxpQ0FBaUM7c0JBQXpDLEtBQUs7Z0JBRUksSUFBSTtzQkFBYixNQUFNO2dCQUVHLElBQUk7c0JBQWIsTUFBTTtnQkFDRyxNQUFNO3NCQUFmLE1BQU07Z0JBQ0csS0FBSztzQkFBZCxNQUFNO2dCQUNHLEtBQUs7c0JBQWQsTUFBTTtnQkFDRyxNQUFNO3NCQUFmLE1BQU07Z0JBQ0csU0FBUztzQkFBbEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBJbnB1dCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3B0aW9uYWwsXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgZnJvbSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBBcHBlYXJhbmNlLFxuICBTdHJpcGVFbGVtZW50cyxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zLFxuICBTdHJpcGVFcnJvcixcbiAgU3RyaXBlUGF5bWVudEVsZW1lbnQsXG4gIFN0cmlwZVBheW1lbnRFbGVtZW50Q2hhbmdlRXZlbnQsXG4gIFN0cmlwZVBheW1lbnRFbGVtZW50T3B0aW9uc1xufSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IFN0cmlwZUVsZW1lbnRzRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9lbGVtZW50cy5kaXJlY3RpdmUnO1xuXG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlSW50ZXJmYWNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9zdHJpcGUtaW5zdGFuY2UuaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgU3RyaXBlRWxlbWVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtc3RyaXBlLXBheW1lbnQnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmaWVsZFwiICNzdHJpcGVFbGVtZW50UmVmPjwvZGl2PmAsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIFN0cmlwZVBheW1lbnRFbGVtZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoJ3N0cmlwZUVsZW1lbnRSZWYnKSBwdWJsaWMgc3RyaXBlRWxlbWVudFJlZiE6IEVsZW1lbnRSZWY7XG4gIGVsZW1lbnQhOiBTdHJpcGVQYXltZW50RWxlbWVudDtcbiAgZWxlbWVudHM6IFN0cmlwZUVsZW1lbnRzO1xuXG4gIEBJbnB1dCgpIGNvbnRhaW5lckNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG9wdGlvbnM6IFBhcnRpYWw8U3RyaXBlUGF5bWVudEVsZW1lbnRPcHRpb25zPjtcbiAgQElucHV0KCkgZWxlbWVudHNPcHRpb25zOiBQYXJ0aWFsPFN0cmlwZUVsZW1lbnRzT3B0aW9ucz47XG4gIEBJbnB1dCgpIHN0cmlwZTogU3RyaXBlU2VydmljZUludGVyZmFjZTtcblxuICBASW5wdXQoKSBhcHBlYXJhbmNlOiBBcHBlYXJhbmNlO1xuICBASW5wdXQoKSBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgQElucHV0KCkgZG9Ob3RDcmVhdGVVbnRpbENsaWVudFNlY3JldElzU2V0ID0gZmFsc2U7XG5cbiAgQE91dHB1dCgpIGxvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPFN0cmlwZVBheW1lbnRFbGVtZW50PigpO1xuXG4gIEBPdXRwdXQoKSBibHVyID0gbmV3IEV2ZW50RW1pdHRlcjx7IGVsZW1lbnRUeXBlOiAncGF5bWVudCcgfT4oKTtcbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8U3RyaXBlUGF5bWVudEVsZW1lbnRDaGFuZ2VFdmVudD4oKTtcbiAgQE91dHB1dCgpIGZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjx7IGVsZW1lbnRUeXBlOiAncGF5bWVudCcgfT4oKTtcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjx7IGVsZW1lbnRUeXBlOiAncGF5bWVudCcgfT4oKTtcbiAgQE91dHB1dCgpIGVzY2FwZSA9IG5ldyBFdmVudEVtaXR0ZXI8eyBlbGVtZW50VHlwZTogJ3BheW1lbnQnIH0+KCk7XG4gIEBPdXRwdXQoKSBsb2FkZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgICBlbGVtZW50VHlwZTogJ3BheW1lbnQnO1xuICAgIGVycm9yOiBTdHJpcGVFcnJvcjtcbiAgfT4oKTtcblxuICBzdGF0ZTogJ25vdHJlYWR5JyB8ICdzdGFydGluZycgfCAncmVhZHknID0gJ25vdHJlYWR5JztcbiAgcHJpdmF0ZSBlbGVtZW50c1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBzdHJpcGVFbGVtZW50c1NlcnZpY2U6IFN0cmlwZUVsZW1lbnRzU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGVsZW1lbnRzUHJvdmlkZXI6IFN0cmlwZUVsZW1lbnRzRGlyZWN0aXZlXG4gICkge31cblxuICBhc3luYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdzdGFydGluZyc7XG4gICAgbGV0IHVwZGF0ZUVsZW1lbnRzID0gZmFsc2U7XG5cbiAgICBpZiAoXG4gICAgICAhdGhpcy5lbGVtZW50c1Byb3ZpZGVyICYmXG4gICAgICAoY2hhbmdlcy5lbGVtZW50c09wdGlvbnMgfHwgY2hhbmdlcy5zdHJpcGUgfHwgY2hhbmdlcy5jbGllbnRTZWNyZXQgfHwgY2hhbmdlcy5hcHBlYXJhbmNlIHx8ICF0aGlzLmVsZW1lbnRzKVxuICAgICkge1xuICAgICAgdGhpcy5lbGVtZW50cyA9IGF3YWl0IHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlLmVsZW1lbnRzKHRoaXMuc3RyaXBlLCB7XG4gICAgICAgIC4uLih0aGlzLmVsZW1lbnRzT3B0aW9ucyB8fCB7fSksXG4gICAgICAgIC4uLih0aGlzLmFwcGVhcmFuY2UgPyB7IGFwcGVhcmFuY2U6IHRoaXMuYXBwZWFyYW5jZSB9IDoge30pLFxuICAgICAgICAuLi4odGhpcy5jbGllbnRTZWNyZXQgPyB7IGNsaWVudFNlY3JldDogdGhpcy5jbGllbnRTZWNyZXQgfSA6IHt9KVxuICAgICAgfSBhcyBTdHJpcGVFbGVtZW50c09wdGlvbnMpLnRvUHJvbWlzZSgpO1xuICAgICAgdXBkYXRlRWxlbWVudHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZS5tZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCB0aGlzLmNvbnRhaW5lckNsYXNzKTtcbiAgICBpZiAoY2hhbmdlcy5vcHRpb25zIHx8IGNoYW5nZXMuY29udGFpbmVyQ2xhc3MgfHwgIXRoaXMuZWxlbWVudCB8fCB1cGRhdGVFbGVtZW50cykge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudCAmJiAhdXBkYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy51cGRhdGUob3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudHMgJiYgdXBkYXRlRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAncmVhZHknO1xuICB9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlLm1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIHRoaXMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgaWYgKHRoaXMuZWxlbWVudHNQcm92aWRlcikge1xuICAgICAgdGhpcy5lbGVtZW50c1N1YnNjcmlwdGlvbiA9IHRoaXMuZWxlbWVudHNQcm92aWRlci5lbGVtZW50cy5zdWJzY3JpYmUoKGVsZW1lbnRzKSA9PiB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3JlYWR5JztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gJ25vdHJlYWR5Jykge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdzdGFydGluZyc7XG5cbiAgICAgIHRoaXMuZWxlbWVudHMgPSBhd2FpdCB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZS5lbGVtZW50cyh0aGlzLnN0cmlwZSwge1xuICAgICAgICAuLi4odGhpcy5lbGVtZW50c09wdGlvbnMgfHwge30pLFxuICAgICAgICAuLi4odGhpcy5hcHBlYXJhbmNlID8geyBhcHBlYXJhbmNlOiB0aGlzLmFwcGVhcmFuY2UgfSA6IHt9KSxcbiAgICAgICAgLi4uKHRoaXMuY2xpZW50U2VjcmV0ID8geyBjbGllbnRTZWNyZXQ6IHRoaXMuY2xpZW50U2VjcmV0IH0gOiB7fSlcbiAgICAgIH0gYXMgU3RyaXBlRWxlbWVudHNPcHRpb25zKS50b1Byb21pc2UoKTtcbiAgICAgIHRoaXMuY3JlYXRlRWxlbWVudChvcHRpb25zKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZWxlbWVudHNTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuZWxlbWVudHNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob3B0aW9uczogUGFydGlhbDxTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnM+KTogU3RyaXBlUGF5bWVudEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudXBkYXRlKG9wdGlvbnMpO1xuICB9XG5cbiAgY29sbGFwc2UoKTogU3RyaXBlUGF5bWVudEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY29sbGFwc2UoKTtcbiAgfVxuXG4gIGZldGNoVXBkYXRlcygpIHtcbiAgICByZXR1cm4gZnJvbSh0aGlzLmVsZW1lbnRzLmZldGNoVXBkYXRlcygpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRWxlbWVudChvcHRpb25zOiBQYXJ0aWFsPFN0cmlwZVBheW1lbnRFbGVtZW50T3B0aW9ucz4gPSB7fSkge1xuICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC51bm1vdW50KCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudHMuY3JlYXRlKCdwYXltZW50Jywgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gbnVsbDtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQub24oJ2NoYW5nZScsIChldikgPT4gdGhpcy5jaGFuZ2UuZW1pdChldikpO1xuICAgIHRoaXMuZWxlbWVudC5vbignYmx1cicsIChldikgPT4gdGhpcy5ibHVyLmVtaXQoZXYpKTtcbiAgICB0aGlzLmVsZW1lbnQub24oJ2ZvY3VzJywgKGV2KSA9PiB0aGlzLmZvY3VzLmVtaXQoZXYpKTtcbiAgICB0aGlzLmVsZW1lbnQub24oJ3JlYWR5JywgKGV2KSA9PiB0aGlzLnJlYWR5LmVtaXQoZXYpKTtcbiAgICB0aGlzLmVsZW1lbnQub24oJ2VzY2FwZScsIChldikgPT4gdGhpcy5lc2NhcGUuZW1pdChldikpO1xuICAgIHRoaXMuZWxlbWVudC5vbignbG9hZGVycm9yJywgKGV2KSA9PiB0aGlzLmxvYWRlcnJvci5lbWl0KGV2KSk7XG5cbiAgICB0aGlzLmVsZW1lbnQubW91bnQodGhpcy5zdHJpcGVFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgdGhpcy5sb2FkLmVtaXQodGhpcy5lbGVtZW50KTtcbiAgfVxufVxuIl19