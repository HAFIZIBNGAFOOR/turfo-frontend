import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, EventEmitter, Output, Optional, ContentChild, TemplateRef } from '@angular/core';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/card-group.directive";
import * as i3 from "@angular/common";
class StripeCardExpiryComponent {
    stripeElementsService;
    cardGroup;
    loadingTemplate;
    stripeElementRef;
    element;
    containerClass;
    options;
    load = new EventEmitter();
    blur = new EventEmitter();
    change = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    escape = new EventEmitter();
    elements;
    cardGroupSubscription;
    constructor(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
    }
    async ngOnChanges(changes) {
        if (changes.options || changes.containerClass) {
            this.setupElement('options');
        }
    }
    ngOnInit() {
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((elements) => {
                this.elements = elements;
                this.setupElement('elements');
            });
        }
        else {
            throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    }
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     */
    getCardExpiry() {
        return this.element;
    }
    setupElement(source) {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardExpiry', options);
            this.element.on('change', (ev) => {
                this.change.emit(ev);
                this.cardGroup?.change.emit(ev);
            });
            this.element.on('blur', () => {
                this.blur.emit();
                this.cardGroup?.blur.emit();
            });
            this.element.on('focus', () => {
                this.focus.emit();
                this.cardGroup?.focus.emit();
            });
            this.element.on('ready', () => {
                this.ready.emit();
                this.cardGroup?.ready.emit();
            });
            this.element.on('escape', () => {
                this.escape.emit();
                this.cardGroup?.escape.emit();
            });
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
            this.cardGroup?.load.emit(this.element);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripeCardExpiryComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeCardGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: StripeCardExpiryComponent, isStandalone: true, selector: "ngx-stripe-card-expiry", inputs: { containerClass: "containerClass", options: "options" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape" }, queries: [{ propertyName: "loadingTemplate", first: true, predicate: NgxStripeElementLoadingTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="field" #stripeElementRef>
      <ng-container
        *ngIf="cardGroup && cardGroup.state !== 'ready' && loadingTemplate"
        [ngTemplateOutlet]="loadingTemplate"
      ></ng-container>
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] });
}
export { StripeCardExpiryComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripeCardExpiryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-card-expiry',
                    standalone: true,
                    template: `
    <div class="field" #stripeElementRef>
      <ng-container
        *ngIf="cardGroup && cardGroup.state !== 'ready' && loadingTemplate"
        [ngTemplateOutlet]="loadingTemplate"
      ></ng-container>
    </div>
  `,
                    imports: [CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }, { type: i2.StripeCardGroupDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { loadingTemplate: [{
                type: ContentChild,
                args: [NgxStripeElementLoadingTemplateDirective, { read: TemplateRef }]
            }], stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,