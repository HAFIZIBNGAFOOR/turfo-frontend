import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, EventEmitter, Output, Optional } from '@angular/core';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/elements.directive";
class StripePaymentRequestButtonComponent {
    stripeElementsService;
    elementsProvider;
    stripeElementRef;
    element;
    paymentRequest;
    containerClass;
    paymentOptions;
    options;
    elementsOptions;
    stripe;
    load = new EventEmitter();
    change = new EventEmitter();
    blur = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    token = new EventEmitter();
    paymentMethod = new EventEmitter();
    source = new EventEmitter();
    cancel = new EventEmitter();
    shippingaddresschange = new EventEmitter();
    shippingoptionchange = new EventEmitter();
    notavailable = new EventEmitter();
    elements;
    state = 'notready';
    elementsSubscription;
    constructor(stripeElementsService, elementsProvider) {
        this.stripeElementsService = stripeElementsService;
        this.elementsProvider = elementsProvider;
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        let updateElements = false;
        if (!this.elementsProvider && (changes.elementsOptions || changes.stripe || !this.elements)) {
            const elements = await this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();
            this.elements = elements;
            updateElements = true;
        }
        if (changes.paymentOptions && this.paymentRequest) {
            this.updateRequest(this.paymentOptions);
        }
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
    }
    async ngOnInit() {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.createElement(options);
                this.state = 'ready';
            });
        }
        else if (this.state === 'notready') {
            this.state = 'starting';
            this.elements = await this.stripeElementsService.elements(this.stripe).toPromise();
            this.createElement(options);
            this.state = 'ready';
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    canMakePayment() {
        return from(this.paymentRequest.canMakePayment());
    }
    update(options) {
        this.element.update(options);
    }
    updateRequest(options) {
        const { currency, total, displayItems, shippingOptions } = options;
        this.paymentRequest.update({
            currency,
            total,
            displayItems,
            shippingOptions
        });
    }
    show() {
        this.paymentRequest.show();
    }
    abort() {
        this.paymentRequest.abort();
    }
    isShowing() {
        return this.paymentRequest.isShowing();
    }
    /**
     * @deprecated
     */
    getButton() {
        return this.element;
    }
    async createElement(options = {}) {
        this.paymentRequest = this.stripeElementsService.paymentRequest(this.stripe, this.paymentOptions);
        this.paymentRequest.on('token', (ev) => this.token.emit(ev));
        if (this.paymentMethod.observed)
            this.paymentRequest.on('paymentmethod', (ev) => this.paymentMethod.emit(ev));
        if (this.source.observed && !this.paymentMethod.observed)
            this.paymentRequest.on('source', (ev) => this.source.emit(ev));
        this.paymentRequest.on('cancel', () => this.cancel.emit());
        this.paymentRequest.on('shippingaddresschange', (ev) => this.shippingaddresschange.emit(ev));
        this.paymentRequest.on('shippingoptionchange', (ev) => this.shippingoptionchange.emit(ev));
        if (this.element) {
            this.element.unmount();
        }
        this.element = this.elements.create('paymentRequestButton', {
            paymentRequest: this.paymentRequest,
            ...options
        });
        const result = await this.paymentRequest.canMakePayment();
        if (result) {
            this.element.on('click', (ev) => this.change.emit(ev));
            this.element.on('blur', () => this.blur.emit());
            this.element.on('focus', () => this.focus.emit());
            this.element.on('ready', () => this.ready.emit());
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit({
                paymentRequestButton: this.element,
                paymentRequest: this.paymentRequest
            });
        }
        else {
            this.notavailable.emit();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripePaymentRequestButtonComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.3", type: StripePaymentRequestButtonComponent, isStandalone: true, selector: "ngx-stripe-payment-request-button", inputs: { containerClass: "containerClass", paymentOptions: "paymentOptions", options: "options", elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { load: "load", change: "change", blur: "blur", focus: "focus", ready: "ready", token: "token", paymentMethod: "paymentMethod", source: "source", cancel: "cancel", shippingaddresschange: "shippingaddresschange", shippingoptionchange: "shippingoptionchange", notavailable: "notavailable" }, viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `<div class="field" #stripeElementRef></div>`, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }] });
}
export { StripePaymentRequestButtonComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.3", ngImport: i0, type: StripePaymentRequestButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-payment-request-button',
                    standalone: true,
                    template: `<div class="field" #stripeElementRef></div>`,
                    imports: [CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }, { type: i2.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], paymentOptions: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], load: [{
                type: Output
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], token: [{
                type: Output
            }], paymentMethod: [{
                type: Output
            }], source: [{
                type: Output
            }], cancel: [{
                type: Output
            }], shippingaddresschange: [{
                type: Output
            }], shippingoptionchange: [{
                type: Output
            }], notavailable: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,