import { ElementRef, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy, TemplateRef } from '@angular/core';
import { StripeElementsOptions, StripeElements, StripeExpressCheckoutElement, StripeExpressCheckoutElementOptions, StripeExpressCheckoutElementReadyEvent, StripeError, StripeExpressCheckoutElementUpdateOptions, StripeExpressCheckoutElementClickEvent, StripeExpressCheckoutElementConfirmEvent, StripeExpressCheckoutElementShippingAddressChangeEvent, StripeExpressCheckoutElementShippingRateChangeEvent } from '@stripe/stripe-js';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import { StripeElementsDirective } from '../directives/elements.directive';
import { StripeServiceInterface } from '../interfaces/stripe-instance.interface';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as i0 from "@angular/core";
export type NgxStripeExpressCheckoutElementLoadErrorEvent = {
    elementType: 'expressCheckout';
    error: StripeError;
};
export declare class StripeExpressCheckoutComponent implements OnInit, OnChanges, OnDestroy {
    stripeElementsService: StripeElementsService;
    private elementsProvider;
    loadingTemplate?: TemplateRef<NgxStripeElementLoadingTemplateDirective>;
    stripeElementRef: ElementRef;
    element: StripeExpressCheckoutElement;
    containerClass: string;
    options: StripeExpressCheckoutElementOptions;
    elementsOptions: Partial<StripeElementsOptions>;
    stripe: StripeServiceInterface;
    load: EventEmitter<StripeExpressCheckoutElement>;
    blur: EventEmitter<void>;
    cancel: EventEmitter<void>;
    clicked: EventEmitter<StripeExpressCheckoutElementClickEvent>;
    confirm: EventEmitter<StripeExpressCheckoutElementConfirmEvent>;
    focus: EventEmitter<void>;
    ready: EventEmitter<StripeExpressCheckoutElementReadyEvent>;
    escape: EventEmitter<void>;
    loaderror: EventEmitter<NgxStripeExpressCheckoutElementLoadErrorEvent>;
    shippingaddresschange: EventEmitter<StripeExpressCheckoutElementShippingAddressChangeEvent>;
    shippingratechange: EventEmitter<StripeExpressCheckoutElementShippingRateChangeEvent>;
    elements: StripeElements;
    state: 'notready' | 'starting' | 'ready';
    private elementsSubscription;
    constructor(stripeElementsService: StripeElementsService, elementsProvider: StripeElementsDirective);
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    update(options: StripeExpressCheckoutElementUpdateOptions): StripeExpressCheckoutElement;
    /**
     * @deprecated
     */
    getLinkAuthenticationElement(): StripeExpressCheckoutElement;
    private createElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<StripeExpressCheckoutComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StripeExpressCheckoutComponent, "ngx-stripe-express-checkout", never, { "containerClass": { "alias": "containerClass"; "required": false; }; "options": { "alias": "options"; "required": false; }; "elementsOptions": { "alias": "elementsOptions"; "required": false; }; "stripe": { "alias": "stripe"; "required": false; }; }, { "load": "load"; "blur": "blur"; "cancel": "cancel"; "clicked": "clicked"; "confirm": "confirm"; "focus": "focus"; "ready": "ready"; "escape": "escape"; "loaderror": "loaderror"; "shippingaddresschange": "shippingaddresschange"; "shippingratechange": "shippingratechange"; }, ["loadingTemplate"], never, true, never>;
}
