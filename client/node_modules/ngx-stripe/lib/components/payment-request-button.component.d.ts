import { ElementRef, EventEmitter, OnChanges, SimpleChanges, OnInit, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { StripeElementsOptions, StripeElements, PaymentRequestOptions, PaymentRequest, CanMakePaymentResult, PaymentRequestUpdateOptions, StripePaymentRequestButtonElement, StripePaymentRequestButtonElementOptions, StripePaymentRequestButtonElementClickEvent, PaymentRequestTokenEvent, PaymentRequestPaymentMethodEvent, PaymentRequestSourceEvent, PaymentRequestShippingAddressEvent, PaymentRequestShippingOptionEvent } from '@stripe/stripe-js';
import { StripeElementsDirective } from '../directives/elements.directive';
import { StripeServiceInterface } from '../interfaces/stripe-instance.interface';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as i0 from "@angular/core";
export declare class StripePaymentRequestButtonComponent implements OnInit, OnChanges, OnDestroy {
    stripeElementsService: StripeElementsService;
    private elementsProvider;
    stripeElementRef: ElementRef;
    element: StripePaymentRequestButtonElement;
    paymentRequest: PaymentRequest;
    containerClass: string;
    paymentOptions: PaymentRequestOptions;
    options: StripePaymentRequestButtonElementOptions;
    elementsOptions: Partial<StripeElementsOptions>;
    stripe: StripeServiceInterface;
    load: EventEmitter<{
        paymentRequestButton: StripePaymentRequestButtonElement;
        paymentRequest: PaymentRequest;
    }>;
    change: EventEmitter<StripePaymentRequestButtonElementClickEvent>;
    blur: EventEmitter<void>;
    focus: EventEmitter<void>;
    ready: EventEmitter<void>;
    token: EventEmitter<PaymentRequestTokenEvent>;
    paymentMethod: EventEmitter<PaymentRequestPaymentMethodEvent>;
    source: EventEmitter<PaymentRequestSourceEvent>;
    cancel: EventEmitter<void>;
    shippingaddresschange: EventEmitter<PaymentRequestShippingAddressEvent>;
    shippingoptionchange: EventEmitter<PaymentRequestShippingOptionEvent>;
    notavailable: EventEmitter<void>;
    elements: StripeElements;
    private state;
    private elementsSubscription;
    constructor(stripeElementsService: StripeElementsService, elementsProvider: StripeElementsDirective);
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    canMakePayment(): Observable<CanMakePaymentResult | null>;
    update(options: Partial<StripePaymentRequestButtonElementOptions>): void;
    updateRequest(options: PaymentRequestUpdateOptions): void;
    show(): void;
    abort(): void;
    isShowing(): boolean;
    /**
     * @deprecated
     */
    getButton(): StripePaymentRequestButtonElement;
    private createElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<StripePaymentRequestButtonComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StripePaymentRequestButtonComponent, "ngx-stripe-payment-request-button", never, { "containerClass": { "alias": "containerClass"; "required": false; }; "paymentOptions": { "alias": "paymentOptions"; "required": false; }; "options": { "alias": "options"; "required": false; }; "elementsOptions": { "alias": "elementsOptions"; "required": false; }; "stripe": { "alias": "stripe"; "required": false; }; }, { "load": "load"; "change": "change"; "blur": "blur"; "focus": "focus"; "ready": "ready"; "token": "token"; "paymentMethod": "paymentMethod"; "source": "source"; "cancel": "cancel"; "shippingaddresschange": "shippingaddresschange"; "shippingoptionchange": "shippingoptionchange"; "notavailable": "notavailable"; }, never, never, true, never>;
}
