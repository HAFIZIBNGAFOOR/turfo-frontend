import { ElementRef, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy, TemplateRef } from '@angular/core';
import { Subscription } from 'rxjs';
import { StripeElements, StripeCardExpiryElement, StripeCardExpiryElementOptions, StripeCardExpiryElementChangeEvent } from '@stripe/stripe-js';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import { StripeCardGroupDirective } from '../directives/card-group.directive';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as i0 from "@angular/core";
export declare class StripeCardExpiryComponent implements OnInit, OnChanges, OnDestroy {
    stripeElementsService: StripeElementsService;
    cardGroup: StripeCardGroupDirective;
    loadingTemplate?: TemplateRef<NgxStripeElementLoadingTemplateDirective>;
    stripeElementRef: ElementRef;
    element: StripeCardExpiryElement;
    containerClass: string;
    options: Partial<StripeCardExpiryElementOptions>;
    load: EventEmitter<StripeCardExpiryElement>;
    blur: EventEmitter<void>;
    change: EventEmitter<StripeCardExpiryElementChangeEvent>;
    focus: EventEmitter<void>;
    ready: EventEmitter<void>;
    escape: EventEmitter<void>;
    elements: StripeElements;
    cardGroupSubscription: Subscription;
    constructor(stripeElementsService: StripeElementsService, cardGroup: StripeCardGroupDirective);
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    ngOnInit(): void;
    ngOnDestroy(): void;
    update(options: Partial<StripeCardExpiryElementOptions>): void;
    /**
     * @deprecated
     */
    getCardExpiry(): StripeCardExpiryElement;
    private setupElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<StripeCardExpiryComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StripeCardExpiryComponent, "ngx-stripe-card-expiry", never, { "containerClass": { "alias": "containerClass"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, { "load": "load"; "blur": "blur"; "change": "change"; "focus": "focus"; "ready": "ready"; "escape": "escape"; }, ["loadingTemplate"], never, true, never>;
}
