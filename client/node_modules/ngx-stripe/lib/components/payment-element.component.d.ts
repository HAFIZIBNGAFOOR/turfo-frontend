import { OnChanges, OnDestroy, ElementRef, EventEmitter, SimpleChanges, OnInit } from '@angular/core';
import { Appearance, StripeElements, StripeElementsOptions, StripeError, StripePaymentElement, StripePaymentElementChangeEvent, StripePaymentElementOptions } from '@stripe/stripe-js';
import { StripeElementsDirective } from '../directives/elements.directive';
import { StripeServiceInterface } from '../interfaces/stripe-instance.interface';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as i0 from "@angular/core";
export declare class StripePaymentElementComponent implements OnInit, OnChanges, OnDestroy {
    stripeElementsService: StripeElementsService;
    private elementsProvider;
    stripeElementRef: ElementRef;
    element: StripePaymentElement;
    elements: StripeElements;
    containerClass: string;
    options: Partial<StripePaymentElementOptions>;
    elementsOptions: Partial<StripeElementsOptions>;
    stripe: StripeServiceInterface;
    appearance: Appearance;
    clientSecret: string;
    doNotCreateUntilClientSecretIsSet: boolean;
    load: EventEmitter<StripePaymentElement>;
    blur: EventEmitter<{
        elementType: 'payment';
    }>;
    change: EventEmitter<StripePaymentElementChangeEvent>;
    focus: EventEmitter<{
        elementType: 'payment';
    }>;
    ready: EventEmitter<{
        elementType: 'payment';
    }>;
    escape: EventEmitter<{
        elementType: 'payment';
    }>;
    loaderror: EventEmitter<{
        elementType: 'payment';
        error: StripeError;
    }>;
    state: 'notready' | 'starting' | 'ready';
    private elementsSubscription;
    constructor(stripeElementsService: StripeElementsService, elementsProvider: StripeElementsDirective);
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    update(options: Partial<StripePaymentElementOptions>): StripePaymentElement;
    collapse(): StripePaymentElement;
    fetchUpdates(): import("rxjs").Observable<{
        error?: {
            message: string;
            status?: string;
        };
    }>;
    private createElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<StripePaymentElementComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StripePaymentElementComponent, "ngx-stripe-payment", never, { "containerClass": { "alias": "containerClass"; "required": false; }; "options": { "alias": "options"; "required": false; }; "elementsOptions": { "alias": "elementsOptions"; "required": false; }; "stripe": { "alias": "stripe"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "clientSecret": { "alias": "clientSecret"; "required": false; }; "doNotCreateUntilClientSecretIsSet": { "alias": "doNotCreateUntilClientSecretIsSet"; "required": false; }; }, { "load": "load"; "blur": "blur"; "change": "change"; "focus": "focus"; "ready": "ready"; "escape": "escape"; "loaderror": "loaderror"; }, never, never, true, never>;
}
