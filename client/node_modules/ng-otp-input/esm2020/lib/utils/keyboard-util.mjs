export class KeyboardUtil {
    static ifTab(event) {
        return this.ifKey(event, 'Tab');
    }
    static ifDelete(event) {
        return this.ifKey(event, 'Delete;Del');
    }
    static ifBackspace(event) {
        return this.ifKey(event, 'Backspace');
    }
    static ifRightArrow(event) {
        return this.ifKey(event, 'ArrowRight;Right');
    }
    static ifLeftArrow(event) {
        return this.ifKey(event, 'ArrowLeft;Left');
    }
    static ifSpacebar(event) {
        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key
    }
    static ifKey(event, keys) {
        let keysToCheck = keys.split(';');
        return keysToCheck.some(k => k === event.key);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtdXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLW90cC1pbnB1dC9zcmMvbGliL3V0aWxzL2tleWJvYXJkLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFlBQVk7SUFDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFtQjtRQUM1QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQW1CO1FBQy9CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBbUI7UUFDbEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBQyxXQUFXLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFtQjtRQUNuQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLGtCQUFrQixDQUFDLENBQUE7SUFDL0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBbUI7UUFDbEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQW1CO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQSxpRUFBaUU7SUFDMUcsQ0FBQztJQUNELE1BQU0sQ0FBRSxLQUFLLENBQUMsS0FBbUIsRUFBRSxJQUFXO1FBQzFDLElBQUksV0FBVyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUMsQ0FBQyxLQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgS2V5Ym9hcmRVdGlse1xyXG4gICAgc3RhdGljIGlmVGFiKGV2ZW50OktleWJvYXJkRXZlbnQpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlmS2V5KGV2ZW50LCdUYWInKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpZkRlbGV0ZShldmVudDpLZXlib2FyZEV2ZW50KXtcclxuICAgICAgICByZXR1cm4gdGhpcy5pZktleShldmVudCwnRGVsZXRlO0RlbCcpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlmQmFja3NwYWNlKGV2ZW50OktleWJvYXJkRXZlbnQpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlmS2V5KGV2ZW50LCdCYWNrc3BhY2UnKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpZlJpZ2h0QXJyb3coZXZlbnQ6S2V5Ym9hcmRFdmVudCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaWZLZXkoZXZlbnQsJ0Fycm93UmlnaHQ7UmlnaHQnKVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGlmTGVmdEFycm93KGV2ZW50OktleWJvYXJkRXZlbnQpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlmS2V5KGV2ZW50LCdBcnJvd0xlZnQ7TGVmdCcpXHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaWZTcGFjZWJhcihldmVudDpLZXlib2FyZEV2ZW50KXtcclxuICAgICAgICByZXR1cm4gdGhpcy5pZktleShldmVudCwnU3BhY2ViYXI7ICcpLy9kb24ndCByZW1vdmUgdGhlIHNwYWNlIGFmdGVyIDsgYXMgdGhpcyB3aWxsIGNoZWNrIGZvciBzcGFjZSBrZXlcclxuICAgIH1cclxuICAgIHN0YXRpYyAgaWZLZXkoZXZlbnQ6S2V5Ym9hcmRFdmVudCwga2V5czpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICAgICAgbGV0IGtleXNUb0NoZWNrPWtleXMuc3BsaXQoJzsnKTtcclxuICAgICAgICByZXR1cm4ga2V5c1RvQ2hlY2suc29tZShrPT4gayA9PT1ldmVudC5rZXkpO1xyXG4gICAgfVxyXG59Il19